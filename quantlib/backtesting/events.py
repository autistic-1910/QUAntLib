"""Event system for event-driven backtesting.

Defines the core event types used in the backtesting engine.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, Optional
from enum import Enum


class EventType(Enum):
    """Event types for the backtesting system."""
    MARKET = "MARKET"
    SIGNAL = "SIGNAL"
    ORDER = "ORDER"
    FILL = "FILL"


class Event(ABC):
    """Base class for all events in the backtesting system."""
    
    def __init__(self, event_type: EventType, timestamp: datetime):
        self.type = event_type
        self.timestamp = timestamp
        
    @abstractmethod
    def __str__(self) -> str:
        pass


class MarketEvent(Event):
    """Market data event indicating new market data is available."""
    
    def __init__(self, timestamp: datetime, symbols: list = None):
        super().__init__(EventType.MARKET, timestamp)
        self.symbols = symbols or []
        
    def __str__(self) -> str:
        return f"MarketEvent({self.timestamp}, symbols={self.symbols})"


class SignalEvent(Event):
    """Signal event generated by a strategy."""
    
    def __init__(self, timestamp: datetime, symbol: str, signal_type: str,
                 strength: float = 1.0, metadata: Optional[Dict[str, Any]] = None):
        super().__init__(EventType.SIGNAL, timestamp)
        self.symbol = symbol
        self.signal_type = signal_type  # 'BUY', 'SELL', 'HOLD'
        self.strength = strength  # Signal strength (0-1)
        self.metadata = metadata or {}
        
    def __str__(self) -> str:
        return f"SignalEvent({self.timestamp}, {self.symbol}, {self.signal_type}, strength={self.strength})"


class OrderEvent(Event):
    """Order event to be sent to the broker."""
    
    def __init__(self, timestamp: datetime, symbol: str, order_type: str,
                 quantity: int, direction: str, price: Optional[float] = None,
                 order_id: Optional[str] = None):
        super().__init__(EventType.ORDER, timestamp)
        self.symbol = symbol
        self.order_type = order_type  # 'MKT', 'LMT', 'STP'
        self.quantity = abs(quantity)
        self.direction = direction  # 'BUY', 'SELL'
        self.price = price  # For limit orders
        self.order_id = order_id
        
    def __str__(self) -> str:
        price_str = f", price={self.price}" if self.price else ""
        return f"OrderEvent({self.timestamp}, {self.symbol}, {self.direction} {self.quantity} {self.order_type}{price_str})"


class FillEvent(Event):
    """Fill event indicating an order has been executed."""
    
    def __init__(self, timestamp: datetime, symbol: str, exchange: str,
                 quantity: int, direction: str, fill_price: float,
                 commission: float = 0.0, order_id: Optional[str] = None):
        super().__init__(EventType.FILL, timestamp)
        self.symbol = symbol
        self.exchange = exchange
        self.quantity = abs(quantity)
        self.direction = direction  # 'BUY', 'SELL'
        self.fill_price = fill_price
        self.commission = commission
        self.order_id = order_id
        
    def calculate_commission(self) -> float:
        """Calculate commission for this fill."""
        return self.commission
        
    def __str__(self) -> str:
        return f"FillEvent({self.timestamp}, {self.symbol}, {self.direction} {self.quantity} @ {self.fill_price}, commission={self.commission})"